Test for BaseGeometry Class
==========================================

Import the class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

-----------------------------
-----------------------------
    No arguments

    >>> obj = BaseGeometry()

-----------------------------
-----------------------------
    One arg

    >>> obj_1 = BaseGeometry(1)
    Traceback (most recent call last):
    TypeError: object() takes no parameters

-----------------------------
-----------------------------
    Two args

    >>> obj_2 = BaseGeometry(1, 1)
    Traceback (most recent call last):
    TypeError: object() takes no parameters

-----------------------------
-----------------------------
    Dir

    >>> 'area' in dir(obj)
    True
    >>> 'integer_validator' in dir(obj)
    True

-----------------------------
-----------------------------
    Area error

    >>> obj.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

-----------------------------
-----------------------------
    integer_validator

    >>> obj.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> obj.integer_validator(0)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> obj.integer_validator(0, 0, 0, 0)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 5 were given

    >>> obj.integer_validator("name",None)
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> obj.integer_validator(1, 1)

    >>> obj.integer_validator("str", True)
    
    >>> obj.integer_validator(1, True)

    >>> obj.integer_validator(1, [])
    Traceback (most recent call last):
    TypeError: 1 must be an integer

    >>> obj.integer_validator(1, 'hbtn')
    Traceback (most recent call last):
    TypeError: 1 must be an integer

    >>> obj.integer_validator({}, 1)
    
    >>> obj.integer_validator('julien', 2)

    >>> obj.integer_validator('julien', 0)
    Traceback (most recent call last):
    ValueError: julien must be greater than 0

    >>> obj.integer_validator('julien', -2)
    Traceback (most recent call last):
    ValueError: julien must be greater than 0
